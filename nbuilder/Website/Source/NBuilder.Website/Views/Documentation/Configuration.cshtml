@{
    ViewBag.Title = "Configuration";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Configuration</h2>
    
<p>NBuilder allows you to change its default behaviour using the <strong>BuilderSetup</strong> class.</p>
    
<h3>Specifying a custom persistence service</h3>
    
<p>You can completely replace the default persistence service with your own. All you need to do is inherit from IPersistenceService and specify it using BuilderSetup.SetPersistenceService()</p>

<pre class="brush: csharp">BuilderSetup.SetPersistenceService(new MyCustomPersistenceService());</pre>
    
<h3>Specifying a custom property namer</h3>
    
<p>You can specify a different property namer. Out of the box the ones available are the default SequentialPropertyNamer and the RandomValuePropertyNamer</p>

<pre class="brush: csharp">
    
var namer = new RandomValuePropertyNamer(new RandomGenerator(), 
                                            new ReflectionUtil(), 
                                            true, 
                                            DateTime.Now, 
                                            DateTime.Now.AddDays(10), 
                                            true);

BuilderSetup.SetDefaultPropertyNamer(namer);
    
</pre>
    
<h3>Setting a property namer for a specific type</h3>
    
<p>If you need to override the property naming for a particular type you can use the SetPropertyNamerFor&lt;T&gt; method.</p>

<pre class="brush: csharp">
    
BuilderSetup.SetPropertyNamerFor&lt;Product&gt;(
                    new CustomProductPropertyNamer(new ReflectionUtil()));
</pre>
       
<h3>Disabling property naming for an individual property</h3>
    
<p>You can switch off property naming using the DisablePropertyNamingFor() method</p>

<pre class="brush: csharp">
BuilderSetup.DisablePropertyNamingFor&lt;Product, int&gt;(x => x.Id);
</pre>  